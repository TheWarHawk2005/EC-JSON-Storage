console.success=function(e){console.log("%c"+e,"color:#72BE8C;")};const ExtendsJSON={post:function(n,r,o,i){return new Promise(function(t,s){if(n)if(r){o||console.warn("It is recommended to provide a security key"),i||console.warn("It is recommended to set bin to private");let e=new XMLHttpRequest;e.open("POST","https://json.extendsclass.com/bin",!0),e.setRequestHeader("Api-key",r),e.setRequestHeader("Security-key",o),e.setRequestHeader("Private",i),e.onload=()=>{200===e.status?(console.success("Bin created successfully"),t(e.responseText)):s(new Error("Request failed with status "+e.status))},e.send(JSON.stringify(n))}else s(new Error("POST requests require an api key"));else s(new Error("POST requests require data to create bin"))})},get:function(n,r){return new Promise(function(t,s){if(n){let e=new XMLHttpRequest;e.open("GET","https://json.extendsclass.com/bin/"+n,!0),e.setRequestHeader("Security-key",r),e.onload=function(){200===e.status?t(e.responseText):s(new Error("Request failed with status "+e.status))},e.onerror=function(){s(new Error("Request failed"))},e.send()}else s(new Error("GET requests require a bin ID"))})},put:function(n,r,o){return new Promise(function(t,s){if(n)if(r){o||console.warn("Some bins cannot be updated without a security key");let e=new XMLHttpRequest;e.open("PUT","https://json.extendsclass.com/bin/"+r,!0),e.setRequestHeader("Security-key",o),e.onload=function(){200===e.status?t(e.responseText):s(new Error("Request failed with status "+e.status))},e.onerror=function(){s(new Error("Request failed"))},e.send(JSON.stringify(n))}else s(new Error("PUT requests require a bin ID"));else s(new Error("PUT requests require data to update bin"))})},patch:function(n,r,o){return new Promise(function(t,s){if(n)if(r){o||console.warn("Some bins cannot be updated without a security key");let e=new XMLHttpRequest;e.open("PATCH","https://json.extendsclass.com/bin/"+r,!0),e.setRequestHeader("Content-type","application/merge-patch+json"),e.setRequestHeader("Security-key",o),e.onload=function(){200===e.status?t(e.responseText):s(new Error("Request failed with status "+e.status))},e.onerror=function(){s(new Error("Request failed"))},e.send(JSON.stringify(n))}else s(new Error("PATCH requests require a bin ID"));else s(new Error("PATCH requests require data to update bin"))})},delete:function(n,r){return new Promise(function(t,s){if(n){r||console.warn("Some bins cannot be deleted without a security key");let e=new XMLHttpRequest;e.open("DELETE","https://json.extendsclass.com/bin/"+n,!0),e.setRequestHeader("Security-key",r),e.onload=function(){200===e.status?t(e.responseText):s(new Error("Request failed with status "+e.status))},e.onerror=function(){s(new Error("Request failed"))},e.send()}else s(new Error("PATCH requests require a bin ID"))})}};